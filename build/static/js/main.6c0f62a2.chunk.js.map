{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AddItemToCartButton","_ref","icon","title","react_default","a","createElement","className","App","state","loading","status","clicked","rsvps","members","componentDidMount","fetch","then","res","json","response","results","filter","r","hasOwnProperty","reduce","rsvp","index","_rsvp$member","member","member_id","name","mp","member_photo","photo_link","highres_link","push","_this","setState","catch","error","err","Error","console","log","list","_this$state","this","memberObjects","key","map","m","concat","link","src","alt","style","paddingBottom","marginBottom","App_AddItemToCartButton","display","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAEMA,SAAsB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,MAAT,OAC1BC,EAAAC,EAAAC,cAAA,gBACKJ,GAAQE,EAAAC,EAAAC,cAAA,KAAGC,UAAW,SAAWL,IACnCC,KAoFUK,6MAhFbC,MAAQ,CACNC,SAAS,EACTC,OAAQ,UACRC,SAAU,EACVC,MAAO,GACPC,QAAS,MAEXC,kBAAoB,WAClBC,MACE,kJAECC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJ,IAAMP,EAAQO,EAASC,QAAQC,OAAO,SAAAC,GAAC,OACrCA,EAAEC,eAAe,kBAEbV,EAAUD,EAAMY,OACpB,SAACX,EAASY,EAAMC,GAAU,IAAAC,EACIF,EAAKG,OAAzBC,EADgBF,EAChBE,UAAWC,EADKH,EACLG,KAEbC,EAAKN,EAAKO,aACVC,EAAaF,EAAGG,cAAgBH,EAAGE,WAGzC,OAFApB,EAAQ,GAAGsB,KAAKN,GAChBhB,EAAQ,GAAGsB,KAAK,CAAEL,OAAMG,eACjBpB,GAET,CAAC,GAAI,KAEPuB,EAAKC,SAAS,CAAEzB,QAAOC,UAASJ,SAAS,MAE1C6B,MAAM,SAAAC,GACL,IAAMC,EAAM,IAAIC,MAAMF,GACtBG,QAAQC,IAAIH,8EAKT,IAIHI,EAJGC,EAC6BC,KAAKtC,MAAjCK,EADDgC,EACChC,QAAgBJ,GADjBoC,EACUjC,MADViC,EACiBpC,SAElBsC,GADclC,EAAQ,GACNA,EAAQ,IA8B9B,OA3BE+B,EADEnC,EACKN,EAAAC,EAAAC,cAAA,MAAI2C,IAAK,GAAT,WAEAD,EAAcE,IAAI,SAACC,EAAGxB,GAC3B,IAAMG,EAAYhB,EAAQ,GAAGa,GACrBI,EAAqBoB,EAArBpB,KAAMG,EAAeiB,EAAfjB,WAMd,OACE9B,EAAAC,EAAAC,cAAA,MAAI2C,IAAG,GAAAG,OAAKD,EAAL,KAAAC,OAAUzB,IACfvB,EAAAC,EAAAC,cAAA,OACEC,UAAU,QACV8C,MAAI,EACJC,IAAKpB,EACLqB,IAAG,GAAAH,OAAKrB,EAAL,QAAAqB,OAAgBtB,KAErB1B,EAAAC,EAAAC,cAAA,QAAMkD,MAAO,CAAEC,cAAe,MAAOC,aAAc,SAAnD,GAAAN,OACMrB,EADN,QAAAqB,OACiBtB,OASvB1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqD,EAAD,CAAqBxD,MAAM,qBAC3BC,EAAAC,EAAAC,cAACqD,EAAD,CAAqBxD,MAAM,mBAAmBD,KAAK,SACnDE,EAAAC,EAAAC,cAAA,MAAIkD,MAAO,CAAEI,QAAS,WAAaf,WA3EzBgB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.6c0f62a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nconst AddItemToCartButton = ({ icon, title }) => (\n  <button>\n    {!!icon && <i className={\"fa fa-\" + icon} />}\n    {title}\n  </button>\n);\nclass App extends Component {\n  state = {\n    loading: true,\n    status: \"loading\",\n    clicked: -1,\n    rsvps: [],\n    members: []\n  };\n  componentDidMount = () => {\n    fetch(\n      \"/2/rsvps?offset=0&format=json&signed=true&rsvp=yes&event_id=257046298&page=200&fields=&key=7862814232c775b72f12448011388&order=name&desc=false\"\n    )\n      .then(res => res.json())\n      .then(response => {\n        const rsvps = response.results.filter(r =>\n          r.hasOwnProperty(\"member_photo\")\n        );\n        const members = rsvps.reduce(\n          (members, rsvp, index) => {\n            const { member_id, name } = rsvp.member;\n\n            const mp = rsvp.member_photo;\n            const photo_link = mp.highres_link || mp.photo_link;\n            members[0].push(member_id);\n            members[1].push({ name, photo_link });\n            return members;\n          },\n          [[], []]\n        );\n        this.setState({ rsvps, members, loading: false });\n      })\n      .catch(error => {\n        const err = new Error(error);\n        console.log(err);\n      });\n  };\n  cdu;\n\n  render() {\n    const { members, rsvps, loading } = this.state;\n    const memberArray = members[0];\n    const memberObjects = members[1];\n    let list;\n    if (loading) {\n      list = <li key={0}>Loading</li>;\n    } else {\n      list = memberObjects.map((m, index) => {\n        const member_id = members[0][index];\n        const { name, photo_link } = m;\n        // if (!r.hasOwnProperty(\"member_photo\")) {\n        //   return list;\n        // } else {\n        // let { highres_link, photo_link } = r.member_photo;\n        // photo_link = highres_link ? highres_link : photo_link;\n        return (\n          <li key={`${m}-${index}`}>\n            <img\n              className=\"photo\"\n              link\n              src={photo_link}\n              alt={`${name} ID-${member_id}`}\n            />\n            <span style={{ paddingBottom: '4em', marginBottom: '30px' }}>\n              {`${name} ID-${member_id}`}\n            </span> \n          </li>\n        );\n\n        // }\n      });\n    }\n    return (\n      <div>\n        <AddItemToCartButton title=\"Add item to cart\" />\n        <AddItemToCartButton title=\"Add item to cart\" icon=\"plus\" />\n        <ul style={{ display: \"inline\" }}>{list}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}